---
name: setup
description: Execute steps to set up the project

inputs:
  artifacts:
    description: The path to the artifacts to upload
    default: docs

  command:
    description: Execute this poetry command
    default: test

  groups:
    description: Install these dependency groups with poetry
    default: ''

  python-version:
    description: The version of Python to use
    default: '3.12'

outputs:
  artifacts:
    description: The name of the build artifacts this action publishes to GitHub
    value: ${{ steps.artifacts.outputs.name }}

runs:
  steps:
    - run: pipx install poetry
      shell: sh

    - run: pipx inject poetry 'poethepoet[poetry_plugin]'
      shell: sh

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - id: poetry
      run: tr -d '\n' <<<"${{ inputs.groups }}" | tr -c '[:alnum:]' '-' | xargs printf 'groups=%s\n' >>"$GITHUB_OUTPUT"
      shell: bash

    - uses: actions/cache@v4
      with:
        path: ~/.cache
        key: ${{ runner.os }}-${{ inputs.python-version }}-${{ steps.poetry.outputs.groups }}

    - run: poetry ${{ inputs.groups && format('install --only {0}', inputs.groups) || 'install'}} --all-extras --sync
      shell: sh

    # note: 'poetry' is used to run 'poe' tasks because `poetry_command = ""` in 'pyproject.toml'
    # ref: https://github.com/rusty-dicom/dicom-echo/blob/faabe95b0b60c2936de99351656f470363bc96c4/pyproject.toml#L604
    - run: poetry ${{ inputs.command }}
      shell: sh

    # strip arguments from the task when naming the artifacts
    - id: artifacts
      if: ${{ inputs.artifacts }}
      env:
        POE_TASK: ${{ inputs.command }}
      run: printf 'name=%s-%s-py%s\n' "${POE_TASK% *}" "${{ inputs.artifacts }}" "${{ inputs.python-version }}" >>"$GITHUB_OUTPUT"
      shell: sh

    - if: ${{ inputs.artifacts }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifacts.outputs.name }}
        overwrite: true
        path: ${{ inputs.artifacts }}

    - if: ${{ runner.debug }}
      run: git status
      shell: sh

  using: composite
